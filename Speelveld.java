package controller;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

/**
 *
 * @author AnnMarie
 */
public class Speelveld extends javax.swing.JPanel implements ActionListener {

    private MapBuilder m;
    private Speler s;
    
   // private Eindvlak eind = new Eindvlak(Color.GREEN, 45, 45);

    private Vlak[][] vlakken;
    
    private JFrame gameFrame;

    public Speelveld(Color kleur, int width, int height, JFrame gameFrame) {
        initComponents();
        this.gameFrame = gameFrame;
        m = new MapBuilder();
        s = new Speler();

        setBackground(kleur);
        setSize(width, height);
        this.setFocusable(true);
        requestFocus(); //WHAT ARE U??!
        InstantieerVlakken();
        generateGame();
//        Timer t = new Timer(1000, this);
//        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /*
     * To change this license header, choose License Headers in Project Properties.
     * To change this template file, choose Tools | Templates
     * and open the template in the editor.
     */
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        // the next forloop can probalby be removed in the future, because you dont draw the images on the panel
        // instead youre drawing the velds on this panel and the velds knows what images they contain
//        for (int y = 0; y < 10; y++) {
//            for (int x = 0; x < 10; x++) {
//                if (m.getMap(x, y).equals("n")) {
//                  //  g.drawImage(m.getNormaalPanel(), x * 48, y * 48, null);
//                }
//                if (m.getMap(x, y).equals("b")) {
//                    //g.drawImage(m.getbarricade(), x * 48, y * 48, null);
//                }
//                if (m.getMap(x, y).equals("m")) {
//                   // g.drawImage(m.getMuur(), x * 48, y * 48, null);
//                }
//              
//            }
//
//        }



        //start makeNormaalVlak
        g.setColor(Color.RED);
        g.fillRect(1, 1, 47, 47);

       // g.drawImage(s.getPlayerImage(), s.getTileX() * 48, s.getTileY() * 48, null); //PLAYER NEEDS TO KNOW WHERE IT IS ON SPEELVELD

    }
    
    /**
     * add the panels inside the 2d array to the gameframe
     */

    public void generateGame(){
        for(int x = 0; x < vlakken.length; x++){
            for (int y = 0; y < vlakken[x].length; y++){
                vlakken[x][y].setVisible(true);
                System.out.println(vlakken[x][y].getClass().getName());
                gameFrame.add(vlakken[x][y]);
            }
        }
    }
    public void InstantieerVlakken() {
        vlakken = new Vlak[10][10];
        //Eindvlak eindvlak  = new Eindvlak();
        /**
         * add vlak objects inside the vlakken 2d array. 
         * - afhankelijk van which character is placed in a an index
         * - draw the associatad object. 
         */
        Vlak vlak = null;
        for (int x = 0; x < vlakken.length; x++) {
            for (int y = 0; y < vlakken[x].length; y++) {
                if (m.getMap(x, y).equals("n")) {
                      vlak = new Vlak();
                      vlak.makeNormaalVlak(x, y);
                }if(m.getMap(x, y).equals("e")) {
                    vlak = new Eindvlak(x, y);
                }
                if (m.getMap(x, y).equals("b")) {
                    vlak = new Barricade(x, y);
//                    if (x == 0) {
//                        b.setLinkerBuur(null);
//                    } else {
//                        b.setLinkerBuur(vlakken[x - 1][y]);
//                    }
//                    if (y == 0) {
//                        b.setBovenBuur(null);
//                    } else {
//                        b.setBovenBuur(vlakken[x][y - 1]);
//                    }
//                    if (x == 9) {
//                        b.setRechterBuur(null);
//                    } else {
//                        b.setRechterBuur(vlakken[x + 1][y]);
//                    }
//                    if (y == 9) {
//                        b.setOnderBuur(null);
//                    } else {
//                        b.setOnderBuur(vlakken[x][y + 1]);
//                    }
                }

                if (m.getMap(x, y).equals("m")) {
                    vlak = new Muur(x, y);
//                    if (x == 0) {
//                        muur.setLinkerBuur(null);
//                    } else {
//                        muur.setLinkerBuur(vlakken[x - 1][y]);
//                    }
//                    if (y == 0) {
//                        muur.setBovenBuur(null);
//                    } else {
//                        muur.setBovenBuur(vlakken[x][y - 1]);
//                    }
//                    if (x == 9) {
//                        muur.setRechterBuur(null);
//                    } else {
//                        muur.setRechterBuur(vlakken[x + 1][y]);
//                    }
//                    if (y == 9) {
//                        muur.setOnderBuur(null);
//                    } else {
//                        muur.setOnderBuur(vlakken[x][y + 1]);
//                    }
                }
                vlakken[x][y] = vlak;
            }
        }
        /**
         * fill the neigbours in the vakken2d array
         * - use a nested forloop to iterate through all the arrays inside the 2d array
         * - check if there is any 2d array with index x + direction and y + direction, if there is, then place the object inside array xy as
         * - a neighbour to the current vlak
         * - otherwiste just insert null
         */
        //[0,0][0,1][0,2]
        //[1,0][1,1][1,2]
        //[2,0][2,1][2,2]
        for(int x = 0; x < vlakken.length; x++){
            for(int y = 0; y < vlakken[x].length; y++){
                
                    if (x == 0) {
                        vlakken[x][y].setLinkerBuur(null);
                    } else {
                        vlakken[x][y].setLinkerBuur(vlakken[x - 1][y]);
                    }
                    if (y == 0) {
                        vlakken[x][y].setBovenBuur(null);
                    } else {
                        vlakken[x][y].setBovenBuur(vlakken[x][y - 1]);
                    }
                    if (x == (vlakken.length - 1)) {
                        vlakken[x][y].setRechterBuur(null);
                    } else {
                        vlakken[x][y].setRechterBuur(vlakken[x + 1][y]);
                    }
                    if (y == (vlakken[x].length - 1)) {
                        vlakken[x][y].setOnderBuur(null);
                    } else {
                        vlakken[x][y].setOnderBuur(vlakken[x][y + 1]);
                    }
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        
        //everytime the player moves we repaint
    }

 

}
