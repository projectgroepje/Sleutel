package Speelveld;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.*;

/**
 *
 * @author Fleur
 */
public class Speelveld extends javax.swing.JPanel implements ActionListener, KeyListener {

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>                        

    private void formKeyPressed(java.awt.event.KeyEvent evt) {                                
        // TODO add your handling code here:
    }                               


    // Variables declaration - do not modify                     
    // End of variables declaration                   
    private Color lijnKleur = Color.white;
    private MapBuilder m = new MapBuilder();
    private Speler s = new Speler();

    private Weg begin = new Weg(Color.RED, 47, 47);
    private Weg eind = new Weg(Color.GREEN, 45, 45);

    private Vlak[][] vlakken;

    public Speelveld(Color color, int width, int height) {
        initComponents();

        setBackground(color);
        setSize(width, height);
        this.setFocusable(true);
        requestFocus();
        InstantieerVlakken();
        Timer t = new Timer(1000, (ActionListener) this);
        t.start();

    }



    public Vlak[][] getVlakken() {
        return vlakken;
    }

    public void move(KeyEvent moveDirection) {
        //maybe move actually needs to be in frame so it can acces the instances of vlakken[][]
        if (moveDirection.getKeyCode() == KeyEvent.VK_LEFT) {
            //Get the neighbouring Vlak in the direction given, move there, repaint this vlak and repaint the new CurrentVlak.

            if (vlakken[(s.getPositieX() - 1)][s.getPositieY()].getSoort().equals("V")) {
                s.setCurrentVlak(vlakken[(s.getPositieX() - 1)][s.getPositieY()]);
                repaint();
            }

            if (vlakken[(s.getPositieX() - 1)][s.getPositieY()].getSoort().equals("B")) {
                if ((s.getSleutel().getSleutelWaarde()) == ((Barricade)vlakken[(s.getPositieX() - 1)][s.getPositieY()]).getBarricadeWaarde()) {
                    s.setCurrentVlak(vlakken[(s.getPositieX() - 1)][s.getPositieY()]);
                    repaint();
                } else {
                    ((Barricade)vlakken[(s.getPositieX() - 1)][s.getPositieY()]).Melding();
                }
            }
            
            if (vlakken[(s.getPositieX() - 1)][s.getPositieY()].getSoort().equalsIgnoreCase("M")) {
                s.setCurrentVlak(this.vlakken); //could possibly alos be empty
            }
            
            if (vlakken[(s.getPositieX() - 1)][s.getPositieY()].getSoort().equalsIgnoreCase("E")) {
                ((Eindvlak)vlakken[(s.getPositieX() - 1)][s.getPositieY()]).Melding();
            } else if (moveDirection.getKeyCode() == KeyEvent.VK_RIGHT) {
                if (vlakken[s.getPositieX()][(s.getPositieY() - 1)].getSoort().equals("V")) {
                    s.setCurrentVlak(vlakken[s.getPositieX()][(s.getPositieY() - 1)]);
                    repaint();
                }
                if (vlakken[s.getPositieX()][(s.getPositieY() - 1)].getSoort().equals("B")) {

                    if ((s.getSleutel().getSleutelWaarde()) == ((Barricade)vlakken[s.getPositieX()][(s.getPositieY() - 1)]).getBarricadeWaarde()) {
                        s.setCurrentVlak(vlakken[s.getPositieX()][(s.getPositieY() - 1)]);
                        repaint();
                    } else {
                        (((Barricade)vlakken[s.getPositieX()][(s.getPositieY() - 1)]).Melding());
                    }
                }
                if (vlakken[s.getPositieX()][(s.getPositieY() - 1)].getSoort().equalsIgnoreCase("M")) {
                    s.setCurrentVlak(this.vlakken); //could possibly alos be empty
                }
                if (vlakken[s.getPositieX()][(s.getPositieY() - 1)].getSoort().equalsIgnoreCase("E")) {
                    ((Eindvlak)vlakken[s.getPositieX()][(s.getPositieY()-1)]).Melding();
                }
            } else if (moveDirection.getKeyCode() == KeyEvent.VK_UP) {
                if (vlakken[s.getPositieX()][(s.getPositieY()y - 1)].getSoort().equals("V")) {
                    s.setCurrentVlak(getVlakken[s.getPositieX()][(s.getPositieY()y - 1)]);
                    repaint();
                }
                if (vlakken[s.getPositieX()][(s.getPositieY()y - 1)].getSoort().equals("B")) {

                    if ((s.getSleutel().getSleutelWaarde()) == ((Barricade) vlakken[s.getPositieX()][(s.getPositieY()y - 1)].getBarricadeWaarde)) {
                        s.setCurrentVlak(vlakken[s.getPositieX()][(s.getPositieY()y - 1)]);
                        repaint();
                    } else {
                        (((Barricade) vlakken[s.getPositieX()][(s.getPositieY()y - 1)]).Melding());
                    }
                }
                if (vlakken[s.getPositieX()][(s.getPositieY()y - 1)].getSoort().equalsIgnoreCase("M")) {
                    s.setCurrentVlak(this.vlakken); //could possibly alos be empty
                }
                if (vlakken[s.getPositieX()][(s.getPositieY()y - 1)].getSoort().equalsIgnoreCase("E")) {
                    (Eindvlak) vlakken[s.getPositieX()][(s.getPositieY()y - 1)].melding();
                }
            } else if (moveDirection.getKeyCode() == KeyEvent.VK_DOWN) {
                if (vlakken[s.getPositieX()][(s.getPositieY() + 1)].getSoort().equals("V")) {
                    s.setCurrentVlak(vlakken[s.getPositieX()][(s.getPositieY() + 1)]);
                    repaint();
                }
                if (vlakken[s.getPositieX()][(s.getPositieY() + 1)].getSoort().equals("B")) {

                    if ((s.getSleutel().getSleutelWaarde()) == ((Barricade) getVlakken()[s.getPositieX()][(s.getPositieY() + 1)]).getBarricadeWaarde()) {
                        s.setCurrentVlak(vlakken[s.getPositieX()][(s.getPositieY() + 1)]);
                        repaint();
                    } else {
                        ((Barricade)vlakken[s.getPositieX()][(s.getPositieY() + 1)]).Melding();
                    }
                }
                if (vlakken[s.getPositieX()][(s.getPositieY() + 1)].getSoort().equalsIgnoreCase("M")) {
                    s.setCurrentVlak(this.vlakken); //could possibly alos be empty
                }
                if (vlakken[s.getPositieX()][(s.getPositieY() + 1)].getSoort().equalsIgnoreCase("E")) {
                    ((Eindvlak)vlakken[s.getPositieX()][(s.getPositieY() + 1)]).Melding();
                }
            }
        }
    }

 

    @Override
    public void keyTyped(KeyEvent ke) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyReleased(KeyEvent ke) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

@Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        //g.setColor(lijnKleur);
        //g.drawOval(100, 100, 200, 200);

        for (int y = 0; y < 10; y++) {
            for (int x = 0; x < 10; x++) {
                if (m.getMap(x, y).equals("n")) {
                    g.drawImage(m.getNormaalPanel(), x * 48, y * 48, null);
                }
                if (m.getMap(x, y).equals("b")) {
                    g.drawImage(m.getbarricade(), x * 48, y * 48, null);
                }
                if (m.getMap(x, y).equals("m")) {
                    g.drawImage(m.getMuur(), x * 48, y * 48, null);
                }
                if (m.getMap(x, y).equals("s")) {
                    g.drawImage(m.getsleutel(), x * 48, y * 48, null);
                }
            }

        }

        begin.start(g, 1, 1);
        eind.eind(g, 435, 435);
      //  g.drawImage(s.getPlayerImage(), s.gettileX() * 48, s.gettileY() * 48, null);

    }

    public void InstantieerVlakken(){
        vlakken  = new Vlak[10][10];
        Eindvlak eindvlak  = new Eindvlak();
        for (int y = 0; y < 10; y++) {
            for (int x = 0; x < 10; x++) {
                if (m.getMap(x, y).equals("n")) {
                    Vlak v = new Vlak();
                    if(x == 0)
                    {
                        v.setLinkerBuur(null);
                    }
                    else
                    {
                        v.setLinkerBuur(vlakken[x-1][y]);
                    }
                    if(y == 0)
                    {
                        v.setBovenBuur(null);
                    }
                    else
                    {
                        v.setBovenBuur(vlakken[x][y-1]);
                    }
                    if(x == 9)
                    {
                        v.setRechterBuur(null);
                    }
                    else
                    {
                        v.setRechterBuur(vlakken[x+1][y]);
                    }
                    if(y == 9)
                    {
                        v.setOnderBuur(null);
                    }
                    else
                    {
                        v.setOnderBuur(vlakken[x][y+1]);
                    }
                }
                if (m.getMap(x, y).equals("b")) {
                    Barricade b = new Barricade();
               if(x == 0)
                    {
                        b.setLinkerBuur(null);
                    }
                    else
                    {
                        b.setLinkerBuur(vlakken[x-1][y]);
                    }
                    if(y == 0)
                    {
                        b.setBovenBuur(null);
                    }
                    else
                    {
                        b.setBovenBuur(vlakken[x][y-1]);
                    }
                    if(x == 9)
                    {
                        b.setRechterBuur(null);
                    }
                    else
                    {
                        b.setRechterBuur(vlakken[x+1][y]);
                    }
                    if(y == 9)
                    {
                        b.setOnderBuur(null);
                    }
                    else
                    {
                        b.setOnderBuur(vlakken[x][y+1]);
                    }
                }
                
                if (m.getMap(x, y).equals("m")) {
                     Muur muur = new Muur();
                         if(x == 0)
                    {
                        muur.setLinkerBuur(null);
                    }
                    else
                    {
                        muur.setLinkerBuur(vlakken[x-1][y]);
                    }
                    if(y == 0)
                    {
                        muur.setBovenBuur(null);
                    }
                    else
                    {
                        muur.setBovenBuur(vlakken[x][y-1]);
                    }
                    if(x == 9)
                    {
                        muur.setRechterBuur(null);
                    }
                    else
                    {
                        muur.setRechterBuur(vlakken[x+1][y]);
                    }
                    if(y == 9)
                    {
                        muur.setOnderBuur(null);
                    }
                    else
                    {
                        muur.setOnderBuur(vlakken[x][y+1]);
                    } 
                }
                    if (m.getMap(x, y).equals("s")) {
                    Vlak v = new Vlak();
                    Sleutel sleutel = new Sleutel();
                    int value = 100; // i will work on a random value 
                    sleutel.setSleutelWaarde(value);
                    v.setSleutel(sleutel);
                }
            }

        }
    } 

    @Override
        public void actionPerformed(ActionEvent ae) {
        repaint();
    }

   
