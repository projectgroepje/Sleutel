package controller;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.*;

/**
 *collission > ask speler(he needs to send it) where he is / remmeber it on each move from speler.
 * each time speler moves change position of speler in speelveld. 
 * speelveld needs to know the coordinates of the vlak that has a speler at a moment. 
 * when speler.positionx(2)y(3) == vlakken [x(2)][y(3)] send message to vlakken[x(2)][y(3)] 
 * than vlakken[2][3] boolean hasspeler is set to true. 
 * what happens next depends on the kind of vlak that it is. 
 * speelveld might call vlakken[x][y] methodThatHasName(){} that we change in implecation. 
 * vlakken[x][y].tryAndMoveHere < 
 * 
 * @author AnnMarie
 */
public class Speelveld extends javax.swing.JPanel implements ActionListener, KeyListener {

    private MapBuilder m;
    
    
   // private Eindvlak eind = new Eindvlak(Color.GREEN, 45, 45);

    private Vlak[][] vlakken;
    
    private JFrame gameFrame;

    public Speelveld(Color kleur, int width, int height, JFrame gameFrame) {
        initComponents();
        this.gameFrame = gameFrame;
        m = new MapBuilder();
     // ghostspeler   s = new Speler();

        setBackground(kleur);
        setSize(width, height);
        this.setFocusable(true);
        requestFocus(); //WHAT ARE U??!
        InstantieerVlakken();
        WieZijnMijnBuren();
        generateGame();
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>                        
     public Speler getSpeler(){
    return s;
    }
    private void formKeyPressed(java.awt.event.KeyEvent evt) {                                
        // TODO add your handling code here:
         if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            //Get the neighbouring Vlak in the direction given, move there, repaint this vlak and repaint the new CurrentVlak.
             
            
            if (vlakken[(s.getPositieX() - 1)][s.getPositieY()].getSoort()=="V") {
    
        /* s.IkBesta();
               s.setPositieX(s.getPositieX()-1);
                        repaint(); */s.IkBesta();
               s.setPositieX(s.getPositieX()-1);
                        s.repaint();
             System.out.println(s.getPositieX() + "   "+ s.getPositieY());
            }

            if (vlakken[(s.getPositieX() - 1)][s.getPositieY()].getSoort().equals("B")) {
                if ((s.getSleutel().getSleutelWaarde()) == ((Barricade) vlakken[(s.getPositieX() - 1)][s.getPositieY()]).getBarricadeWaarde()) {
                      s.setPositieX(s.getPositieX()-1);
                        repaint();
                } else {
                    ((Barricade) vlakken[(s.getPositieX() - 1)][s.getPositieY()]).Melding();
                }
            }

            if (vlakken[(s.getPositieX() - 1)][s.getPositieY()].getSoort().equalsIgnoreCase("M")) {
                //could possibly alos be empty
            }

            if (vlakken[(s.getPositieX() - 1)][s.getPositieY()].getSoort()=="E") {
                ((Eindvlak) vlakken[(s.getPositieX() - 1)][s.getPositieY()]).Melding();
            }
         
            if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
                  s.setPositieY(s.getPositieX()+1);
                    repaint();
                    System.out.println("ik ga naar rechts");
                if (vlakken[(s.getPositieX()+1)][s.getPositieY() ].getSoort().equals("V")) {
                       s.setPositieY(s.getPositieY()-1);
                    repaint();
                }
                if (vlakken[s.getPositieX()][(s.getPositieY() - 1)].getSoort().equals("B")) {

                    if ((s.getSleutel().getSleutelWaarde()) == ((Barricade) vlakken[s.getPositieX()][(s.getPositieY() - 1)]).getBarricadeWaarde()) {
                           s.setPositieY(s.getPositieY()-1);
                    repaint();
                 
                    } else {
                        ((Barricade) vlakken[s.getPositieX()][(s.getPositieY() - 1)]).Melding();
                    }
                }
                if (vlakken[s.getPositieX()][(s.getPositieY() - 1)].getSoort().equalsIgnoreCase("M")) {
                     //could possibly alos be empty
                }
                if (vlakken[s.getPositieX()][(s.getPositieY() - 1)].getSoort().equalsIgnoreCase("E")) {
                    ((Eindvlak) vlakken[s.getPositieX()][(s.getPositieY() - 1)]).Melding();
                }
            } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
               s.IkBesta();
               s.setPositieX(s.getPositieY()+1);
                        s.repaint();
             System.out.println(s.getPositieX() + "   "+ s.getPositieY());
                if (vlakken[s.getPositieX()][(s.getPositieY()-1)].getSoort().equals("V") ) {
                  s.setPositieY(s.getPositieY()-1);
                  
                    repaint();
                }
                if (vlakken[s.getPositieX()][(s.getPositieY()-1)].getSoort().equals("B")) {

                    if( (s.getSleutel().getSleutelWaarde()) == ((Barricade)vlakken[s.getPositieX()][(s.getPositieY()-1)]).getBarricadeWaarde()){
                        s.setPositieY(s.getPositieY()-1);
                        repaint();
                    }
                    
                    else {
                     ((Barricade)vlakken[s.getPositieX()][(s.getPositieY()-1)]).Melding();
                           }
            }
                if (vlakken[s.getPositieX()][(s.getPositieY()-1)].getSoort().equalsIgnoreCase("M"))
                {
                     //could possibly alos be empty
                }
                if (vlakken[s.getPositieX()][(s.getPositieY() - 1)].getSoort().equalsIgnoreCase("E"))
                 {
                    ((Eindvlak)vlakken[s.getPositieX()][(s.getPositieY() - 1)]).Melding();
                }
            } 
            else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                 s.IkBesta();
               s.setPositieX(s.getPositieY()-1);
                        s.repaint();
             System.out.println(s.getPositieX() + "   "+ s.getPositieY());
                if (vlakken[s.getPositieX()][(s.getPositieY() + 1)].getSoort().equals("V")) {
                     // s.move(s.getPositieX(),(s.getPositieY()+1));
                      s.setPositieY(s.getPositieY()+1);
                      
                    repaint();
                    
                }
                if (vlakken[s.getPositieX()][(s.getPositieY() + 1)].getSoort().equals("B")) {

                    if ((s.getSleutel().getSleutelWaarde()) == ((Barricade)vlakken[s.getPositieX()][(s.getPositieY()-1)]).getBarricadeWaarde()) {
                       s.setPositieY(s.getPositieY()+1);
                        repaint();
                    } else {
                        ((Barricade) vlakken[s.getPositieX()][(s.getPositieY() + 1)]).Melding();
                    }
                }
                if (vlakken[s.getPositieX()][(s.getPositieY() + 1)].getSoort().equals("M")) {
                  //could possibly alos be empty
                }
                if (vlakken[s.getPositieX()][(s.getPositieY() + 1)].getSoort().equalsIgnoreCase("E")) {
                    ((Eindvlak) vlakken[s.getPositieX()][(s.getPositieY() + 1)]).Melding();
                }
            }
        }
    
    }                               


    // Variables declaration - do not modify                     
    // End of variables declaration                   

    /*
     * To change this license header, choose License Headers in Project Properties.
     * To change this template file, choose Tools | Templates
     * and open the template in the editor.
     */
         @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        // the next forloop can probalby be removed in the future, because you dont draw the images on the panel
        // instead youre drawing the velds on this panel and the velds knows what images they contain
//        for (int y = 0; y < 10; y++) {
//            for (int x = 0; x < 10; x++) {
//                if (m.getMap(x, y).equals("n")) {
//                  //  g.drawImage(m.getNormaalPanel(), x * 48, y * 48, null);
//                }
//                if (m.getMap(x, y).equals("b")) {
//                    //g.drawImage(m.getbarricade(), x * 48, y * 48, null);
//                }
//                if (m.getMap(x, y).equals("m")) {
//                   // g.drawImage(m.getMuur(), x * 48, y * 48, null);
//                }
//              
//            }
//
//        }

        
        //start makeNormaalVlak
        g.setColor(Color.RED);
        g.fillRect(1, 1, 47, 47);
        for(int x = 0; x < vlakken.length; x++){
            for (int y = 0; y < vlakken[x].length; y++){
                g.drawImage(vlakken[x][y].getImage(), x, y, null);
            }

       g.drawImage(getSpeler().getPlayerImage(), getSpeler().getPositieX() * 48, getSpeler().getPositieY() * 48, null); //PLAYER NEEDS TO KNOW WHERE IT IS ON SPEELVELD
      
    }
    }
    /**
     * add the panels inside the 2d array to the gameframe
     */

    public void generateGame(){
        for(int x = 0; x < vlakken.length; x++){
            for (int y = 0; y < vlakken[x].length; y++){
                vlakken[x][y].setVisible(true);
                //testing \/
                System.out.println(vlakken[x][y].getClass().getName());
                gameFrame.add(vlakken[x][y]);
            }
        }
    }

    
     public void InstantieerVlakken() {
        int value = 100; // i will work on a random value 
         Vlak vlak = null;
        vlakken = new Vlak[10][10];
         for (int x = 0; x < vlakken.length; x++) {
            for (int y = 0; y < vlakken[x].length; y++) {
                if (m.getMap(x, y).equals("s")) {
                vlak = new Vlak();
                      vlak.makeNormaalVlak(x, y);
                      //kebab paste this to all subclasses of vlak in Instantieer vlakken
                      vlak.setPositieX(0);
                      vlak.setPositieY(0);
                      vlak.setHasSpeler(true);
                }
                if (m.getMap(x, y).equals("n")) {
                      vlak = new Vlak();
                      vlak.makeNormaalVlak(x, y);
                      //kebab paste this to all subclasses of vlak in Instantieer vlakken
                      vlak.setPositieX(x);
                      vlak.setPositieY(y);
                }if(m.getMap(x, y).equals("e")) {
                    vlak = new Eindvlak(x,y);
                }
                if (m.getMap(x, y).equals("b")) {
                    vlak = new Barricade(x,y);
                    ((Barricade)vlak).setBarricadeWaarde(value);
                     }

                if (m.getMap(x, y).equals("m")) {
                    vlak = new Muur(x,y);
                }
                   if (m.getMap(x, y).equals("s")) {
                    vlak = new Vlak();
                    Sleutel sleutel = new Sleutel();
                    sleutel.setSleutelWaarde(value);
                    vlak.setSleutel(sleutel);
                }
                vlakken[x][y] = vlak;
                
            }
      
        }
      }

    /**
     *
     */
    public Vlak[][] getVlakken()
    {
             return vlakken;  
    }
    public void WieZijnMijnBuren(){
    for(int x = 0; x < vlakken.length; x++){
            for(int y = 0; y < vlakken[x].length; y++){
                
                    if (x == 0) {
                        vlakken[x][y].setBovenBuur(null);
                    } else {
                        vlakken[x][y].setBovenBuur(vlakken[x - 1][y]);
                    }
                    if (y == 0) {
                        vlakken[x][y].setLinkerBuur(null);
                    } else {
                        vlakken[x][y].setLinkerBuur(vlakken[x][y - 1]);
                    }
                    if (x == (vlakken.length - 1)) {
                        vlakken[x][y].setOnderBuur(null);
                    } else {
                        vlakken[x][y].setOnderBuur(vlakken[x + 1][y]);
                    }
                    if (y == (vlakken[x].length - 1)) {
                        vlakken[x][y].setRechterBuur(null);
                    } else {
                        vlakken[x][y].setRechterBuur(vlakken[x][y + 1]);
                    }
            }
         }
    }
        
   /*  public void move(KeyEvent moveDirection) {
        //maybe move actually needs to be in frame so it can acces the instances of vlakken[][]
       
*/
    @Override
    public void actionPerformed(ActionEvent e) {
        
        //everytime the player moves we repaint
    }

    @Override
    public void keyTyped(KeyEvent ke) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyReleased(KeyEvent ke) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    

 

}
