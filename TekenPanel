/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timerentekenen;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.*;
import javax.swing.*;

/**
 *
 * @author AnnMarie
 */
public class TekenPanel extends javax.swing.JPanel implements ActionListener, KeyListener {

    private Color lijnKleur = Color.white;
    private Spook mijnSpook = new Spook(Color.MAGENTA, 20);

    private maps m = new maps();
    private speler s = new speler();

    private Weg begin = new Weg(Color.RED, 47, 47);
    private Weg eind = new Weg(Color.GREEN, 45, 45);

    public TekenPanel(Color color, int width, int height) {
        initComponents();

        setBackground(color);
        setSize(width, height);
        this.setFocusable(true);
        requestFocus();

        Timer t = new Timer(1000, this);
        t.start();

    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        //g.setColor(lijnKleur);
        //g.drawOval(100, 100, 200, 200);

        for (int y = 0; y < 10; y++) {
            for (int x = 0; x < 10; x++) {
                if (m.getMap(x, y).equals("n")) {
                    g.drawImage(m.getNormaalPanel(), x * 48, y * 48, null);
                }
                if (m.getMap(x, y).equals("b")) {
                    g.drawImage(m.getbarricade(), x * 48, y * 48, null);
                }
                if (m.getMap(x, y).equals("m")) {
                    g.drawImage(m.getMuur(), x * 48, y * 48, null);
                }
                if (m.getMap(x, y).equals("s")) {
                    g.drawImage(m.getsleutel(), x * 48, y * 48, null);
                }
            }

        }

        begin.start(g, 1, 1);
        eind.eind(g, 435, 435);
        g.drawImage(s.getPlayer(), s.gettileX() * 48, s.gettileY() * 48, null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>                        

    private void formMouseClicked(java.awt.event.MouseEvent evt) {                                  
        //int x = evt.getX();
        //int y = evt.getY();

        if (evt.getClickCount() == 2) {
            s.move(1, 0);

        }


    }                                 

    private void formKeyPressed(java.awt.event.KeyEvent evt) {                                
        // TODO add your handling code here:

        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            s.move(1, 0);
        }

    }                               


    // Variables declaration - do not modify                     
    // End of variables declaration                   
    @Override
    public void actionPerformed(ActionEvent e) {
        //repaint(); //panel repaint = this.repaint

        veranderLijnKleur();

        mijnSpook.gaatEensEffeWeg(this.getWidth(), this.getHeight());

        repaint();
        s.checkSpelerPos();


    }

    private void veranderLijnKleur() {
        if (this.lijnKleur == Color.WHITE) {
            this.lijnKleur = Color.BLACK;
        } else {
            this.lijnKleur = Color.WHITE;
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {

    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            s.move(-1, 0);
        }
        if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            s.move(1, 0);
        }

        if (e.getKeyCode() == KeyEvent.VK_UP) {
            s.move(0, -1);
        }

        if (e.getKeyCode() == KeyEvent.VK_DOWN) {
            s.move(0, 1);
        }
        repaint();
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

}
